time_unit = { unit: 60, time_elapsed: 3200, started: '2014-09-27T18:30:49-0300' }

data = [
  {id: 1, name: 'Foobar', state: 'launched', config_file: 'test.yml'},
  {id: 2, name: 'Test Level', state: 'ready', config_file: 'test.yml', time_unit: time_unit, event_queue: {}, sim_loops: []},
  {id: 3, name: 'Default Level', state: 'running', config_file: 'test.yml', time_unit: time_unit, event_queue: {}, sim_loops: []},
  {id: 4, name: 'Old Level', state: 'stopped', config_file: 'test.yml'}
]

states = {
  'launched': { state_class: 'fa-rocket', button_class: 'btn btn-primary spinner' },
  'ready': { state_class: 'fa-cubes', button_class: 'btn btn-success spinner' },
  'running': { state_class: 'fa-spin fa-cog', button_class: 'btn btn-warning spinner' },
  'stopped': { state_class: 'fa-moon-o', button_class: 'btn btn-danger spinner'}
}

app = angular.module('levels', [])

app.controller('MonitorController', [ '$http', (http)->
  @levels = data
  @states = states
  @config_files = []
  @sending = false;
  controller = this

  @loadConfigFiles = () ->
    http.get('/admin/api/v1/config_files.json').success( (data) ->
      controller.config_files = data
    ).error( ->
    )

  @loadLevelInfo = () ->
    http.get('/admin/api/v1/levels.json').success( (data) ->
      controller.levels = controller.levels.concat(data)
    )

  # TODO move to model
  @hasState = (level, state) ->
    level.state is state

  @state_class = (state) ->
    if state?
      @states[state].state_class
    else
      'fa-star'

  @button_class = (state) ->
    @states[state].button_class if state?

  @addLevel = () ->
    @levels.unshift({})

  @launchLevel = (level) ->
    @sending = true
    http.post('/admin/api/v1/levels.json', {level: {name: level.name}}).success( (data) ->
      index = controller.levels.indexOf(level)
      if index != -1
        controller.levels[index] = data
      controller.sending = false
    )

  @removeLevel = (level) ->
    console.log(level)
    #if level.state == ''
    @levels.remove(level)

  @buildLevel = (level) ->
    level.state = 'ready'
    level.config = '????'

  @loadConfigFiles()
  @loadLevelInfo()
])

app.directive('createLevelButton', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("create_level_button.html") %>'
)

app.directive('newLevelForm', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("new_level_form.html") %>'
)

app.directive('levelActions', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("level_actions.html") %>'
)
