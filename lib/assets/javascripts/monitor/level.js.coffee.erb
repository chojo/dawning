app = angular.module('levels', ['ngResource'])

app.factory('levelStates', [ ()->
  @state_classes =
    'launched': 'fa-rocket',
    'ready': 'fa-cubes',
    'running': 'fa-spin fa-cog',
    'stopped': 'fa-moon-o'

  stateClass: (state) =>
    if state?
      @state_classes[state]
    else
      'fa-star'
])

app.factory('levelConfigs', [ '$q', '$http', '$log', ($q, $http, $log) ->

  all: () ->
    @future = $q.defer()
    $http.get('/admin/api/v1/config_files.json')
      .success (data) =>
        @future.resolve(data)
      .error (data, status, headers, config) =>
        $log.warn(data, status, headers(), config)
        @future.reject("Error while loading config files status: #{status}")
    @future.promise

])

app.factory('level', ['$q', '$http', '$log', ($q, $http, $log) ->
  @base_url = '/admin/api/v1'
  @sending  = false

  @handleSuccess = (data) =>
    @callback(data)

  @handleError = (data, status, header, config) =>
    $log.error("could not #{config} status #{status}")

  @apiCall = (callback, apiFunction) =>
    @callback = callback
    apiFunction().success(@handleSuccess).error(@handleError)

  all: (callback) =>
    @apiCall callback, () =>
      $http.get(@base_url + '/levels.json')

  find: (id, callback) =>
    @apiCall callback, () =>
      $http.get(@base_url + '/levels/'+id+'.json')

  launch: (name, callback) =>
      @apiCall callback, () =>
        $http.post(@base_url + '/levels.json', {level: {name: name}})

  build: (level, callback) =>
    @apiCall callback, () =>
      $http.put(@base_url + '/levels/'+level.id+'/build.json', {level: {config: level.config_file}})

  run: (level, callback) =>
    @apiCall callback, () =>
      $http.put(@base_url + '/levels/'+level.id+'/run.json')

  stop: (level, callback) =>
    @apiCall callback, () =>
      $http.put(@base_url + '/levels/'+level.id+'/stop.json')

  join: (level, callback) =>
    @apiCall callback, () =>
      $http.put(@base_url + '/levels/'+level.id+'/join.json')

  remove: (level, callback) =>
    @apiCall callback, () =>
      $http.delete(@base_url + '/levels/'+level.id)

])

app.controller('MonitorController', [ '$scope', '$http', '$timeout', 'level', ($scope, $http, $timeout, level)->

  $scope.levels = []

  @loadLevels = () =>
    level.all (data) =>
      $scope.levels = data

  $scope.addLevel = () ->
    $scope.levels.unshift({})

  @removeLevel = (level) ->
    index = $scope.levels.findIndex (item) ->
      item.name == level.name
    if index != -1
      $scope.levels.splice(index, 1)

  @loadLevels()

])

app.controller('LevelPanelController', [ '$scope', '$http', 'levelStates', 'levelConfigs', 'level', ($scope, $http, levelStates, levelConfigs, level) ->

  levelConfigs.all().then (data) =>
    @config_files = data
  , (error) =>
    console.log(error)

  @sending = false

  $scope.stateClass = () =>
    levelStates.stateClass($scope.level.state)

  $scope.hasState = (state) ->
    if typeof(state) == 'string'
      $scope.level.state is state
    else
      state.indexOf($scope.level.state) > -1

  $scope.launchLevel = () =>
    if $scope.launchForm.$valid
      @sending = 'launch'
      level.launch $scope.new_level_name, @updateLevel

  $scope.buildLevel = () =>
    if $scope.buildForm.$valid
      @sending = 'build'
      level.build $scope.level, @updateLevel

  $scope.runLevel = () =>
    @sending = 'run'
    level.run $scope.level, @updateLevel

  $scope.stopLevel = () =>
    @sending = 'stop'
    level.stop $scope.level, @updateLevel

  $scope.joinLevel = () =>
    @sending = 'join'
    level.join $scope.level, (data) =>
      window.location.href = '/levels/'+$scope.level.id+'/map.html'

  $scope.removeLevel = () =>
    @sending = 'remove'
    level.remove $scope.level, (data) =>
      $scope.monitorCtrl.removeLevel($scope.level)
      @resetSending()

  @updateLevel = (data) =>
    $scope.level = data
    @resetSending()

  @resetSending = () =>
    @sending = false

  $scope.buttonIcon = (icon, action) =>
    classes = {'fa-spin': @sending == action, 'fa-spinner': @sending == action}
    classes[icon] = @sending != action
    classes

  $scope.cannotSubmit = (form) =>
    @sending || form.$invalid

])

app.controller('levelInfoController', [ '$scope', 'level', '$timeout', ($scope, level, $timeout) ->

  @refresh = () =>
    $timeout () =>
      level.find $scope.level.id, (data) =>
        $scope.level = data
        @refresh()
    , 5000

  @refresh()

])

app.directive('createLevelButton', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("create_level_button.html") %>'
)

app.directive('newLevelForm', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("new_level_form.html") %>',
  link: () ->
    $('#level_name').focus()
)

app.directive('levelActions', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("level_actions.html") %>'
)

app.directive('buildLevelForm', ->
  restrict: 'E',
  templateUrl: '<%= asset_path("build_level_form.html") %>'
)

app.directive('actionIcon', ->
  restrict: 'A',
  template: "'ng-class' => \"{'fa-power-off': !panelCtrl.sending, 'fa-spin': panelCtrl.sending, 'fa-spinner': panelCtrl.sending}\"}'"
)
